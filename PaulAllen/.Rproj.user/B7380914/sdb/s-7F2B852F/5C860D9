{
    "contents" : "library(ggplot2)\nlibrary(ReadImages)\nlibrary(RgoogleMaps)\nlibrary(MASS)\ntheme_set(theme_bw())\n\n##https://github.com/hadley/ggplot2/wiki/Crime-in-Downtown-Houston,-Texas-:-Combining-ggplot2-and-Google-Maps\n\n################################################################################\n\npreload functions for later use ####################\n################################################################################\n\nggimage <- function(image){\n  require(ggplot2)\n  if(length(dim(image)) == 2){ message(‘creating black and white image…’) image <- melt(image) names(image) <- c(‘row’,‘column’,‘fill’) plot <- qplot(column, -row, data = image, geom = ‘tile’, fill = fill) + scale_fill_gradient(low = ‘black’, high = ‘white’) } if(length(dim(image)) == 3){ message(‘creating color image…’) image <- apply(image, 1:2, function(v) rgb(v1, v2, v3)) image <- melt(image) names(image) <- c(‘row’, ‘column’, ‘fill’) plot <- qplot(column, -row, data = image, geom = ‘tile’, fill = fill) + scale_fill_identity() } #return(plot) # remove first pound for the image in the case study plot + opts( axis.line = theme_blank(), axis.ticks = theme_blank(), axis.text.x = theme_blank(), axis.text.y = theme_blank(), axis.title.x = theme_blank(), axis.title.y = theme_blank(), axis.ticks.length = unit(0, “lines”), axis.ticks.margin = unit(0, “lines”), legend.position = “none”, panel.background = theme_blank(), panel.border = theme_blank(), panel.grid.major = theme_blank(), panel.grid.minor = theme_blank(), panel.margin = unit(0, “lines”), plot.background = theme_blank(), plot.title = theme_blank(), plot.margin = unit(c(-1, -1, -1.5, -1.5), “lines”) )\n  \n}\n\nggooglemap <- function(location = ‘houston’,\n                       center = c(lat = 29.7632836, lon = -95.3632715), API,\n                       type = c(‘color’,‘bw’)1, rgbcoefs = c(0, 1, 0), zoom = 10,\n                       maptype = ‘terrain’,\n                       destfile = ‘TemporaryMap.jpg’, n_pix = 640)\n{\n  require(ggplot2)\n  require(RgoogleMaps)\n  require(ReadImages)\n  if(!missing(location)){ url_string <- paste(‘http://maps.google.com/maps/geo?q=’, location, sep = ’’) site <- readLines(url(url_string)) site <- site[which(regexpr(‘coordinates’, site) > 0)] if(is.na(site)) stop(‘location geocoding error.’) site <- strsplit(site, ‘\\\\[’)356a192b7913b04c54574d18c28d46e6395428ab2 site <- strsplit(site, ‘,’)356a192b7913b04c54574d18c28d46e6395428ab[1:2] latlon <- as.numeric(site) center <- c(lat = latlon2, lon = latlon1) closeAllConnections() }\n  \n  if(missing(API)) API <- ’’ # ENTER YOUR API HERE\n  \n  get map\n  GetMap(API, center = center[c(‘lat’,‘lon’)],\n         size = c(n_pix, n_pix), zoom = zoom, format = ‘jpg’,\n         maptype = maptype, destfile = destfile)\n  \n  load map\n  map <- read.jpeg(destfile)\n  \n  deal with color\n  if(type == ‘color’){\n    map <- apply(map, 1:2, function(v) rgb(v1, v2, v3))\n  } else if(type == ‘bw’) {\n    nrow <- nrow(map)\n    ncol <- ncol(map)\n    map <- grey(rgb2grey(map, coefs = rgbcoefs))\n    map <- matrix(map, nrow = nrow, ncol = ncol)\n  } else {\n    stop(‘type must be either \\’color\\’ or \\‘bw\\’’, call. = FALSE)\n  }\n  \n  reshape map for plotting\n  m_map <- melt(map)\n  names(m_map) <- c(‘x’,‘y’,‘fill’)\n  m_map <- within(m_map,{\n    x <- x – n_pix/2 – 1\n    y <- y – n_pix/2 – 1\n  })\n  \n  mapInfo <- list(lat = center[‘lat’], lon = center[‘lon’], zoom = zoom, map) XY_cent <- LatLon2XY.centered(mapInfo, center[‘lat’], center[‘lon’]) #XY2LatLon(HouMapInfo, XY_cent$newX, XY_cent$newY)\n  \n  geocode pixel references\n  s <- (-n_pix/2) : (n_pix/2 – 1)\n  lat_wrapper <- function(x) XY2LatLon(mapInfo, n_pix/2, x)1\n  lats < apply(data.frame(s), 1, lat_wrapper)\n  lon_wrapper <- function(y) XY2LatLon(mapInfo, y, n_pix/2)2\n  lons < apply(data.frame(s), 1, lon_wrapper)\n  \n  merge colors to latlons and return\n  df_xy <- expand.grid(x = s, y = s)\n  df_ll <- expand.grid(lat = rev(lats), lon = lons)\n  df_xyll <- data.frame(df_xy, df_ll)\n  df <- suppressMessages(join(df_xyll, m_map, type = ‘right’))\n  df <- df[,c(‘lon’,‘lat’,‘fill’)]\n  df\n}\n\ntheme_nothing <- function (base_size = 12){\n  structure(list(\n    axis.line = theme_blank(),\n    axis.text.x = theme_blank(), axis.text.y = theme_blank(),\n    axis.ticks = theme_blank(),\n    axis.title.x = theme_blank(), axis.title.y = theme_blank(),\n    axis.ticks.length = unit(0, “lines”), axis.ticks.margin = unit(0, “lines”),\n    legend.position = “none”,\n    panel.background = theme_rect(fill = ‘white’),\n    panel.border = theme_blank(),\n    panel.grid.major = theme_blank(), panel.grid.minor = theme_blank(),\n    panel.margin = unit(0, “lines”),\n    plot.background = theme_rect(colour = ‘white’),\n    plot.title = theme_text(size = base_size * 1.2),\n    plot.margin = unit(c(-1, -1, -1.5, -1.5), “lines”)\n  ), class = “options”)\n}\n\nvplayout <- function(x, y) viewport(layout.pos.row = x, layout.pos.col = y)\n\n################################################################################\n\nhadley’s picture ####################\n################################################################################\n\nhadley <- read.jpeg(‘hadley.jpg’)\n\nfor the axes, remove the pound sign in the ggimage function above\nggimage(hadley) + coord_equal()\n\n################################################################################\n\nmaking a map ####################\n################################################################################\n\nCityHall_latlon <- c(lon = -95.369318, lat = 29.760210)\nDowntownMap <-ggooglemap(center = CityHall_latlon, zoom = 14)\n\nqplot(lon, lat, data = DowntownMap, geom = ‘tile’, fill = fill) +\n  scale_fill_identity() +\n  scale_x_continuous(‘Longitude’) +\n  scale_y_continuous(‘Latitude’) +\n  coord_equal() +\n  opts(title = ‘Terrain Map of Downtown Houston’)\n\n################################################################################\n\nhouston crime ####################\n################################################################################\n\nload(‘HoustonCrime.Rdata’) # variable name : crime_df\n\nrestrict to violent crimes\nviolent_crimes <- subset(crime_df,\n                         offense != ‘Auto Theft’ & offense != ‘Theft’ & offense != ‘Burglary’\n)\n\nrestrict to year 2010 (january – august)\nviolent_crimes <- subset(violent_crimes,\n                         time >= ISOdatetime(2010, 1, 1, 0, 0, 0)\n)\n\ngrab downtown google map\nCityHall_latlon <- c(lon = 95.369318, lat = 29.760210)\nDowntownMap <-ggooglemap(center = CityHall_latlon, zoom = 14)\nlat_range < range(DowntownMap$lat)\nlon_range <- range(DowntownMap$lon)\n\ncontour plot\nggplot() +\n  geom_tile(aes(x = lon, y = lat, fill = fill), data = DowntownMap) +\n  scale_fill_identity() +\n  geom_density2d(aes(x = lon, y = lat, colour = ..level..),\n                 bins = I(10), fill = NA, alpha = I(1/2), size = I(.75), data = violent_crimes) +\n  scale_colour_gradient2(‘Violent\\nCrime\\nDensity’,\n                         low = ‘darkblue’, mid = ‘orange’, high = ‘red’, midpoint = 900) +\n  scale_x_continuous(‘Longitude’, limits = lon_range) +\n  scale_y_continuous(‘Latitude’, limits = lat_range) +\n  opts(title = ‘Violent Crime Contour Map of Downtown Houston, 2010’) +\n  coord_equal()\n\npoint plot\nviolent_crimes <- subset(violent_crimes,\n                         lon_range1 <= lon & lon <= lon_range2 &\n                           lat_range1 <= lat & lat <= lat_range2\n) # cuts out the warning for missing values in geom_point\n\nggplot() +\n  geom_tile(aes(x = lon, y = lat, fill = fill), data = DowntownMap) +\n  scale_fill_identity() +\n  geom_jitter(aes(x = lon, y = lat, colour = offense, size = offense),\n              fill = NA, alpha = I(3/4), data = violent_crimes,\n              position = position_jitter(width = .001, height = .001)) +\n  scale_x_continuous(‘Longitude’, limits = lon_range) +\n  scale_y_continuous(‘Latitude’, limits = lat_range) +\n  scale_colour_discrete(‘’) +\n  scale_size_manual(’‘, values = c(\n    ’Robbery’ = 2, ‘Aggravated Assault’ = 2.5, ‘Rape’ = 3, ‘Murder’ = 4\n  )) +\n  opts(title = ‘Violent Crime Map of Downtown Houston, 2010’) +\n  coord_equal()\n\nweather map\nload(‘HoustonCrime.Rdata’) # variable name : crime_df\n\nviolent_crimes <- subset(crime_df,\n                         offense != ‘Auto Theft’ & offense != ‘Theft’ & offense != ‘Burglary’\n)\n\nviolent_crimes <- subset(violent_crimes,\n                         time >= ISOdatetime(2010, 1, 1, 0, 0, 0)\n)\n\nCityHall_latlon <- c(lon = 95.369318, lat = 29.760210)\nDowntownMap <-ggooglemap(center = CityHall_latlon, zoom = 14, maptype = ‘hybrid’)\nlat_range < range(DowntownMap$lat)\nlon_range <- range(DowntownMap$lon)\n\nvclatlon <- violent_crimes[,c(‘lon’,‘lat’)]\nvclatlon <- na.omit(violent_crimes[,c(‘lon’,‘lat’)])\nvclatlon <- subset(vclatlon,\n                   lon_range1 <= lon & lon <= lon_range2 &\n                     lat_range1 <= lat & lat <= lat_range2\n)\nden <- kde2d(vclatlon$lon, vclatlon$lat, n = 320,\n             lims = c(lon_range, lat_range))\n\nkde_df <- expand.grid(\n  lon = seq.int(lon_range1, lon_range2, length.out = 320),\n  lat = seq.int(lat_range1, lat_range2, length.out = 320)\n)\nkde_df$density <- melt(den$z)$value\n\nsummary(kde_df$density)\nden_fill_scale <- scale_colour_gradient2(low = ‘white’, mid = ‘darkgreen’,\n                                         high = ‘red’, midpoint = 225)\nden_fill_scale$train(kde_df$density, T)\nkde_df$density_s <- den_fill_scale$map(kde_df$density)\nkde_df$density_zeroone <- pmin(kde_df$density / max(kde_df$density), .9)\n\nbig_plot <- ggplot() +\n  geom_tile(aes(x = lon, y = lat, fill = fill), data = DowntownMap) +\n  geom_tile(aes(x = lon, y = lat, fill = density_s, alpha = density_zeroone),\n            data = kde_df) +\n  scale_x_continuous(‘Longitude’, limits = lon_range) +\n  scale_y_continuous(‘Latitude’, limits = lat_range) +\n  scale_alpha(to = c(0, .9)) +\n  scale_fill_identity() +\n  opts(\n    legend.position = ‘none’,\n    title = ‘Violent Crime Weather Map of Downtown Houston, 2010’\n  ) +\n  coord_equal()\n\nlittle_plot <- ggplot() +\n  geom_tile(aes(x = lon, y = lat, fill = density_s, alpha = density_zeroone),\n            data = kde_df) +\n  scale_alpha(to = c(0, .9)) +\n  scale_fill_identity() +\n  coord_equal() +\n  theme_nothing()\n\ngrid.newpage()\npushViewport(viewport(layout = grid.layout(4,4)))\nprint(big_plot, vp = vplayout(1:4, 1:4))\nprint(little_plot, vp = vplayout(4, 4))\n\ngrid.newpage()\npushViewport(viewport(layout = grid.layout(1000,1000)))\nprint(big_plot, vp = vplayout(1:1000, 1:1000))\nprint(little_plot, vp = vplayout(697:897, 740:940))",
    "created" : 1392170501216.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1694366137",
    "id" : "5C860D9",
    "lastKnownWriteTime" : 1392170739,
    "path" : "~/Projects/R/PaulAllen/houston_gis.r",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}